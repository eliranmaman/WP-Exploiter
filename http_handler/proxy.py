from itertools import cycle


class Proxy:

    def __init__(self, proxies=None):
        self._addresses = set() if proxies is None else set(proxies)
        self._addresses_cycle = cycle(self._addresses)

    def add_proxy(self, url, port):
        """
        this method adds new address to the addresses' set
        :param url: string of the url or ip
        :param port: string of the desired port
        """
        address = "{}:{}".format(url, port)
        self._addresses.add(address)
        self._addresses_cycle = cycle(self._addresses)

    def remove_proxy(self, url, port):
        """
        this method removes a specific address from 
        :param url: string of the url or ip
        :param port: string of the desired port
        """
        address = "{}:{}".format(url, port)
        self._addresses.remove(address)
        self._addresses_cycle = cycle(self._addresses)

    def get_proxy(self):
        """
        this method converts random address to proxy
        :return: random proxy
        :rtype: dict
        """
        address = next(self._addresses_cycle)
        proxy = {"http": address, "https": address}
        return proxy

    def get_all_proxies(self):
        """
        this method converts all the addresses to proxies (http & https)
        :return: all the addresses as proxies after conversion
        :rtype: array of dicts (json)
        """
        proxies = []
        for addr in self._addresses:
            proxy = {"http": addr, "https": addr}
            proxies.append(proxy)
        return proxies

