"""
This Package responsible for the logs in the WP-exploiter.
"""

try:
    import enum
    import asyncio
    from datetime import datetime
except Exception as e:
    print("Import Error: ", e)


class LoggerMode(enum.Enum):
    """
    :DEVELOP: Will output all the logs to the screen also.
    :DEBUG: Will output only Exceptions to the screen also.
    :DEPLOY: Will not output nothing to the screen.
    """
    DEVELOP = 0
    DEBUG = 1
    DEPLOY = 2


class Logger(object):
    """
    This is a singleton class that handle the logs of the project.
    :method save_log: save the log
    """
    instance = None

    class __Logger:
        """
        Private class - for the singleton.
        """
        file_lock = asyncio.Lock()

        def __init__(self, output_file, log_level):
            self.logfile = output_file
            self.log_level = log_level

    def __init__(self, output_file, log_level=LoggerMode.DEPLOY):
        """
        :param output_file: the file will use for output the messages.
        :param log_level: LoggerMode
        """
        if not Logger.instance:
            Logger.instance = Logger.__Logger(output_file, log_level)
        else:
            Logger.instance.logfile = output_file

    def save_log(self, log, error_msg=None):
        """
        This method are responsible to ouput the logs to the output_file.
        :param log: the log line to store, can be anything that have to_string method.
        :param error_msg: a special message will be print to the log file after the original log.
        :return: None
        """
        try:
            with open(self.instance.logfile, "a+") as file:
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                file.write("{}: ".format(current_time))
                file.write(str(log))
                file.write("\n")
            file.close()
            if self.instance.log_level == LoggerMode.DEVELOP:
                print(log)
            elif self.instance.log_level == LoggerMode.DEBUG and type(log) is Exception:
                print(log)
            if error_msg is not None:
                self.save_log(error_msg)
        except Exception as e:
            print("Error while printing to logs file.")
            print(e)
        finally:
            file.close()
