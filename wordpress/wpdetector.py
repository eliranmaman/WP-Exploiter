import xmltodict
import urllib.parse as urlparse
from urllib.parse import parse_qs
from http_handler.http_handler import HTTPRequest


class WPDetector:

    _ADMIN_PATH = "/wp-admin"
    _LOGIN_PATH = "wp-login.php"
    _FEED_PATH = "/feed"
    _UPGRADE_PATH = _ADMIN_PATH+"/upgrade.php"

    def __init__(self, domain, proxies=None):
        self._http_handler = HTTPRequest(proxies)
        self._words_values = {"/wp-content/": 0.8, '<meta name="generator" content="WordPress': 0.8,
                              "/wordpress/": 0.8, "WordPress": 0.2, "wp-emoji-release.min.js": 0.8}
        self._files_needles = {"license.txt": "WordPress - Web publishing software",
                               "readme.html": "Semantic Personal Publishing Platform"}
        self._web_data = dict()
        self._url = domain
        self._is_wp = False

    def __check_admin_panel(self, url):
        admin_path = url + self._ADMIN_PATH
        response = self.__get_page_data(url)
        if response is not None and self._LOGIN_PATH in str(response.url):
                return 1
        return 0  # not a wardress site

    def __check_words(self, url):
        probability = 0
        response = self.__get_page_data(url)
        if response is None:
            return None
        content = str(response.content)
        if content is not "404":
            for word, value in self._words_values.items():
                if word in content:
                    probability += value
            return probability
        return None

    def __check_files(self, url):
        counter = 0
        for file, needle in self._files_needles.items():
            assembled_url = url + '/' + file
            response = self.__get_page_data(assembled_url)
            if response is None:
                return 0
            content = str(response.content)
            if needle in content:
                counter += 1

        return counter/len(self._files_needles.keys())

    def get_version(self, url):
        url = self.__clean_url(url)
        version = self.__find_version_in_source(url)
        if version is not None:
            return version
        version = self.__find_version_in_feed(url + self._FEED_PATH)
        if version is not None:
            return version
        version = self.__find_version_in_source(url + self._UPGRADE_PATH)
        if version is None:
            version = "Unknown"
        return version

    def __find_version_in_feed(self, url):
        response = self.__get_page_data(url)
        response = response.content
        if response is None:
            return None
        try:
            page = xmltodict.parse(response)  # page => to xml
            ver_url = page["rss"]["channel"]["generator"]  # get the generator var
            ver_url = urlparse.urlparse(ver_url)  # extract the v parameter
            version = parse_qs(ver_url.query)['v'][0]
            return version
        except(Exception):

            return None

    def __find_version_in_source(self, url):
        css_path = ["/style-rtl.min.css?ver=", "/style.min.css?ver=", "/wp-emoji-release.min.js?ver=",
                    "/install.min.css?ver=", "buttons.min.css?ver=", "<meta name=\"generator\" content=\"WordPress"]
        response = self.__get_page_data(url)
        if response is None:
            return None
        data = str(response.content)
        for i in css_path:
            version = data.partition(i)[2].partition("\"")[0]
            if len(version) > 10:
                version = version.split("\\")[0].split("\'")[0]
            elif len(version) > 1:
                return version
            else:
                version = None
        return version

    def __check_if_wp(self, url):
        words_prob = self.__check_words(url)
        if words_prob is None:
            return None
        files_prob = self.__check_files(url)

        return (words_prob+files_prob)/2

    def detect(self, url, threshold=0.4):
        if self.__check_admin_panel(url) is True:
            return True
        prob = self.__check_if_wp(url)
        if prob is None:
            return "Error: could not load page"
        if prob >= threshold:
            return True
        else:
            return False

    def __get_page_data(self, url):
        response = self._web_data.get(url, None)
        if response is None:
            response = self._http_handler.request(url, "GET")
            self._web_data[url] = response
        return response

    def __clean_url(self, url):
        if url[-1:] is "/":
            url = url[:-1]
        return url