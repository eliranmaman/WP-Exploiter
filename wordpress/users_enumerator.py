from http_handler.http_handler import HTTPRequest
import json


class UserEnumerator:
    _START_ENUMERATION = 1
    _FINISH_ENUMERATION = 10
    _REST_API_PATH = "/wp-json/wp/v2/users/"
    _REST_API_ID_COL = "id"
    _REST_API_SLUG_COL = "slug"
    _REST_API_NAME_COL = "name"
    _REST_API_STATUS_COL = "data"
    _AUTHOR_PATH = "/?author="

    def __init__(self):
        self._http_request = HTTPRequest()

    def enumerate(self, url):
        url = self.__clean_url(url)
        users = dict()
        data = dict()
        try:
            data = self.__rest_api_enumeration_all(url)
            users.update(data)
        except:
            print("Error: Function Rest Api Enumeration all is Failed.")
        if len(data) > 0:
            try:
                users.update(self.__rest_api_enumeration_individual(url))
            except:
                print("Error: Function Rest Api Enumeration Individual is Failed.")
        else:
            try:
                users.update(self.__author_enumeration(url))
            except:
                print("Error: Function Rest Api Enumeration Individual is Failed.")
        print("url: "+url)
        print(users)
        return users

    def __rest_api_enumeration_all(self, url):
        users = dict()
        target = url + self._REST_API_PATH
        response = self._http_request.request(target, "GET")
        if response is None:
            return users
        try:
            data = json.loads(response.content)
        except:
            return users
        for user in data:
            try:
                user = json.loads(json.dumps(user))
                users[user[self._REST_API_ID_COL]] = {self._REST_API_SLUG_COL: user[self._REST_API_SLUG_COL],
                                                      self._REST_API_NAME_COL: user[self._REST_API_NAME_COL]}
            except:
                print(user)
                print("Crush.. All")

        return users

    def __rest_api_enumeration_individual(self, url):
        users = dict()
        for i in range(self._START_ENUMERATION, self._FINISH_ENUMERATION):
            try:
                target = url + self._REST_API_PATH + str(i)
                response = self._http_request.request(target, "GET")
                if response is None:
                    return users

                user = json.loads(response.content)
                user = json.loads(json.dumps(user))
                if user.get(self._REST_API_STATUS_COL, None) is not None:
                    continue
                users[user[self._REST_API_ID_COL]] = {self._REST_API_SLUG_COL: user[self._REST_API_SLUG_COL],
                                                      self._REST_API_NAME_COL: user[self._REST_API_NAME_COL]}
            except:
                print("Crush.. Individual")
        return users

    def __author_enumeration(self, url):
        users = dict()
        for i in range(self._START_ENUMERATION, self._FINISH_ENUMERATION):
            target = url + self._AUTHOR_PATH + str(i)
            response = self._http_request.request(target, "GET")
            if response is None:
                continue
            response = str(response.url).replace("https", "http").replace("www.", "")
            target = target.replace("https", "http").replace("www.", "")
            if response != target and "/author/" in response:  # we found user
                user_name = response.replace("-", "").split("/")
                user_name = user_name[len(user_name) - 2]
                users[i] = user_name
        return users

    def __clean_url(self, url):
        if url[-1:] is "/":
            url = url[:-1]
        return url
