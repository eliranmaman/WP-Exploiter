import imaplib
import time
from wordpress.wplogs import WPLogs
from http_handler.request_handler import HTTPWithSession


class WPRegisterUser(object):

    def __init__(self):
        self._http = HTTPWithSession()
        self._logs = WPLogs()

    def register(self, data, proxies=None):
        """
        :param data: dictionary with data username & password for login
                     username: will hold the wanted username
                     password: will hold the wanted password
                     email: will hold the email
                     mail_user: will hold the email user name
                     mail_pass: will hold the email password
                     mail_server: will hold the email server
                     register_page: will hold the register page url
                     login_page: will hold the login page url
                     cannot send only the username & password => must send all the parameters or none!
        :return: True or False
        :raise: Exception in case one of the data dict parameters are missing.
        """
        try:
            username = data['username']
            password = data['password']
            login_page = data['login_page']
            mail_user = data['mail_user']
            mail_pass = data['mail_pass']
            mail_server = data['mail_server']
            register_page = data['register_page']
            login_page = data['login_page']
        except Exception as e:
            self._save_log(e, "Error: one or more of the following parameters are missing in data dict: username,"
                              " password, email, login_page, mail_user, mail_pass, mail_server, register_page, login_page", True)
            raise e
        try:
            self._http.clean_session()
            register = self.__register(data=data, proxies=proxies)
            if register is False:
                return False
            time.sleep(2)  # let the registration mail time to arrive
            password = self.__reset_pass(data, proxies)
            return password
        except Exception as e:
            print(e)
            return False

    def __register(self, data, proxies=None):
        try:
            username = data['username']
            register_page = data['register_page']
            email = data['mail_user']
        except Exception as e:
            self._save_log(e, "Error: one or more of the following parameters are missing in data dict: username,"
                              " password, register_page, admin_login_page", True)
            return False
        params = {'user_login': username, 'user_email': email, 'wp-submit': 'Register',
                      'redirect_to': ''}
        try:
            response = self._http.request(url=register_page, method="POST", params=params, proxies=proxies)
            if response is None:
                msg = "Error: registration failed."
                e = Exception(msg)
                self._save_log(e, msg, True)
                return False
            if "checkemail" in str(response.url):
                return True
            return False
        except Exception as e:
            self._save_log(e, "Error: registration failed.", True)
            return False

    def __reset_pass(self, data, proxies=None):
        try:
            key = self.__get_reset_key(mail_data=data)
            target = data['login_page']+"?action=rp&key="+key+"&login="+data['username']
            response = self._http.request(url=target, method="GET", proxies=proxies)
            if response is None:
                return False
            parameters = {'pass1': data['password'], 'pass1-text': data['password'], 'pw_weak': 'on', 'action': 'resetpass',
                          'pass2': data['password'], 'rp_key': key, 'wp-submit': 'Reset Password'}
            response = self._http.request(url=data['login_page']+"?action=rp", method="POST", params=parameters, proxies=proxies)
            if response is None:
                return False
            return True
        except Exception as e:
            self._save_log(e, "Error: could not reset the password.", True)
            return False

    def __get_reset_key(self, mail_data):
        """
        :param mail_data: dictionary with data username & password & server for login
                     mail_user: will hold the username for the email
                     mail_pass: will hold the password for the email
                     mail_server: will hold the mail server
                     cannot send only the username & password => must send all the parameters or none!
        :return: True or False
        :raise: Exception in case one of the data dict parameters are missing.
        """
        try:
            mail_server = mail_data['mail_server']
            mail_user = mail_data['mail_user']
            mail_pass = mail_data['mail_pass']
        except Exception as e:
            self._save_log(e, "Error: one or more of the following parameters are missing in mail_data dict: mail_user,"
                              " mail_pass, mail_server", True)
            raise e
        try:
            mail = imaplib.IMAP4_SSL(mail_server)
            mail.login(mail_user, mail_pass)
            mail.list()
            # Out: list of "folders" aka labels in gmail.
            mail.select("inbox")  # connect to inbox.
            result, data = mail.search(None, "ALL")
            ids = data[0]  # data is a list.
            id_list = ids.split()  # ids is a space separated string
            latest_email_id = id_list[-1]  # get the latest
            # fetch the email body (RFC822) for the given ID
            result, data = mail.fetch(latest_email_id, "(RFC822)")
            raw_email = data[0][1]  # here's the body, which is raw text of the whole email
            key = str(raw_email).split("/wp-login.php?action=rp&key=")[1].split("&login=elroattacker")[0]
            return key
        except Exception as e:
            self._save_log(e, "Error: key extraction failed.")
            raise e

    def _save_log(self, e, msg=None, print_error=False):
        if print_error is True:
            print(msg)
        self._logs.save_log(e)
        if msg is not None:
            self._save_log(msg)

