"""
This Package responsible for registering new user to a Wordpress web site.
:requirements: python3.X, imaplib, time, requests, urllib3, asyncio, datetime
"""
try:
    import imaplib
    import time

    from config import logs, exploiter_data
    from http_handler import HTTPWithSession
except Exception as e:
    if 'logs' in dir():
        logs.save_log("Import Error: " + str(e))
    print("Import Error: ", e)


class WPRegisterUser(object):
    """
    This class register new user for wordpress site, verifying the email and reset the password.
    This class is designated for default Wordpress registration, could be extended by inhere.
    :method register:
    """
    _REGISTER_REQUIRED_DATA = exploiter_data['WPDatabaseResetExploiter'].get('register_required_data', [])

    def __init__(self):
        self._http = HTTPWithSession()
        self._logs = logs

    def _check_dict_params(self, data):
        """
        This method is checks that all the relevant data available in the data dict.
        :param data: the dict with the data
        :return: boolean
        """
        for required in self._REGISTER_REQUIRED_DATA:
            if required not in data:
                print("Error: the {} key is missing in the 'data' param.".format(required))
                return False
        return True

    def register(self, data, proxies=None):
        """
        This method is register the new user, provide the data to the new user in dict.
        :param proxies: proxies for using in the HTTP requests.
        :param data: dictionary with data username & password for login
                     username: will hold the wanted username
                     password: will hold the wanted password
                     email: will hold the email
                     mail_user: will hold the email user name
                     mail_pass: will hold the email password
                     mail_server: will hold the email server
                     register_page: will hold the register page url
                     login_page: will hold the login page url
                     cannot send only the username & password => must send all the parameters or none!
        :return: boolean (success or not)
        :raise: Exception in case one of the data dict parameters are missing.
        """
        try:
            is_required_data_available = self._check_dict_params(dict)
            if not is_required_data_available:
                return False
            self._http.clean_session()
            try_register = self._register(data=data, proxies=proxies)
            if not try_register:
                return False
            time.sleep(2)  # let the registration mail time to arrive, sleep 2 sec.
            try_rest_pass = self._reset_pass(data, proxies)  # return boolean
            return try_rest_pass
        except Exception as e:
            print("Something goes wrong, please check the logs file.", e)
            self._logs.save_log(e)
            return False

    def _register(self, data, proxies=None):
        """
        This method is private and perform the actual registration.
        :param data: dict with the registration data
        :param proxies: proxies to use with the HTTP requests.
        :return:
        """
        is_required_data_available = self._check_dict_params(dict)
        if not is_required_data_available:
            return False
        username = data['username']
        register_page = data['register_page']
        email = data['mail_user']
        params = {'user_login': username, 'user_email': email, 'wp-submit': 'Register',
                      'redirect_to': ''}
        response = self._http.request(url=register_page, method="POST", params=params, proxies=proxies)
        if response is None:
            self._logs.save_log(e, "Error: registration failed.")
            return False
        if "checkemail" in str(response.url):
            return True
        return False

    def _reset_pass(self, data, proxies=None):
        """
        This method resenting the password after first registration.
        :param data: dict with the relevant data.
        :param proxies:
        :return:
        """
        is_required_data_available = self._check_dict_params(dict)
        if not is_required_data_available:
            return False
        reset_key = self._get_reset_key(mail_data=data)
        url_target = "{}?action=rp&key={}&login={}".format(data['login_page'], reset_key, data['username'])
        response = self._http.request(url=url_target, method="GET", proxies=proxies)
        if response is None:
            return False
        parameters = {'pass1': data['password'], 'pass1-text': data['password'], 'pw_weak': 'on', 'action': 'resetpass',
                      'pass2': data['password'], 'rp_key': reset_key, 'wp-submit': 'Reset Password'}
        url_target = "{}?action=rp".format(data['login_page'])
        response = self._http.request(url=url_target, method="POST", params=parameters, proxies=proxies)
        if response is None:
            return False
        return True

    def _get_reset_key(self, mail_data):
        """
        This method extract from the email the api key for resenting the password.
        :param mail_data: dictionary with data username & password & server for login
                     mail_user: will hold the username for the email
                     mail_pass: will hold the password for the email
                     mail_server: will hold the mail server
                     cannot send only the username & password => must send all the parameters or none!
        :return: str (reset key)
        :raise: Exception in case one of the data dict parameters are missing.
        """
        is_required_data_available = self._check_dict_params(dict)
        if not is_required_data_available:
            return False
        mail_server = mail_data['mail_server']
        mail_user = mail_data['mail_user']
        mail_pass = mail_data['mail_pass']
        try:
            # establish the EMAIL connection
            mail = imaplib.IMAP4_SSL(mail_server)
            mail.login(mail_user, mail_pass)
            mail.list()
            # Out: list of "folders".
            mail.select("inbox")  # connect to inbox.
            result, data = mail.search(None, "ALL")
            ids = data[0]  # data is a list.
            id_list = ids.split()  # ids is a space separated string
            latest_email_id = id_list[-1]  # get the latest
            # fetch the email body (RFC822) for the given ID
            result, data = mail.fetch(latest_email_id, "(RFC822)")
            raw_email = data[0][1]  # here's the body, which is raw text of the whole email
            reset_key = str(raw_email).split("/wp-login.php?action=rp&key=")[1].split("&login={}".format(data['username']))[0]
            return reset_key
        except Exception as e:
            print("Error: While get the reset mail, probably because of the mail connection.", e)
            self._logs.save_log(e, "Error: key extraction failed.")
            raise e