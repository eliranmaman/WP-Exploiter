import xmltodict
import urllib.parse as urlparse
from urllib.parse import parse_qs
import re

from http_handler.http_handler import HTTPRequest

class WPDetector:

    _ADMIN_PATH = "/wp-admin"
    _LOGIN_PATH = "wp-login.php"
    _FEED_PATH = "/feed"
    _UPGRADE_PATH = _ADMIN_PATH+"/upgrade.php"

    def __init__(self):
        self._http_handler = HTTPRequest()
        self._wordlist = [ "/wp-content/", ]
        pass

    def __check_admin_panel(self, url):
        admin_path = url + self._ADMIN_PATH
        response = self._http_handler.request(admin_path, "GET")
        if response is not None:
            if "wp-login.php" in str(response):  # if in the response there is "qp-login.php"
                return 1
            else:
                return 0.2  # if not probably not a WP
        else:
            return 0  # not a wardress site

    def __check_words(self, url):
        response = self._http_handler.request(url,"GET")
        if "WordPress" in str(response):
            print("YESS")
        else:
            print("SORRY")

    def find_version(self,url):
        version = self.__find_version_in_source(url)
        if version is not None:
            return version
        version = self.__find_version_in_feed(url+self._FEED_PATH)
        if version is not None:
            return version
        version = self.__find_version_in_source(url+self._UPGRADE_PATH)
        if version is None:
            version = "Unknow"
        return version

    def __find_version_in_feed(self, url):
        response = self._http_handler.request(url,"GET") # get the page

        if response is None:
            return None
        try:
            page = xmltodict.parse(response)  # page => to xml
            ver_url = page["rss"]["channel"]["generator"] # get the generator var
            ver_url = urlparse.urlparse(ver_url) # extract the v parameter
            version = parse_qs(ver_url.query)['v'][0]
            return version
        except:
            return None

    def __find_version_in_source(self, url):
        css_path = ["/style-rtl.min.css?ver=", "/style.min.css?ver=", "/wp-emoji-release.min.js?ver=",
                    "/install.min.css?ver=", "/buttons.min.css?ver=", "<meta name=\"generator\" content=\"WordPress "]
        response = self._http_handler.request(url,"GET")
        for i in css_path:
            data = str(response)
            version = data.partition(i)[2].partition("\"")[0]
            if len(version) > 10:
                version = version.split("\\")[0].split("\'")[0]
            elif len(version) > 1:
                return version
            else:
                version = None
        return version

    def detect(self, url):
        self.__checkIfWP(url)