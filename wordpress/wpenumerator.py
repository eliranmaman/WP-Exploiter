from http_handler.http_handler import HTTPRequest
from wordpress.wpdetector import WPDetector

import json


class WPEnumerator:
    _DEFAULT_START_ENUMERATION = 1
    _DEFAULT_ENUMERATION_CHUNK = 2
    _REST_API_PATH = "/wp-json/wp/v2/users/"
    _REST_API_ID_COL = "id"
    _REST_API_SLUG_COL = "slug"
    _REST_API_NAME_COL = "name"
    _REST_API_STATUS_COL = "data"
    _AUTHOR_PATH = "/?author="
    _SUCCESS_CODE = 200

    def __init__(self, domain, additional_data=None, proxies=None):
        self._additional_data = additional_data
        self._users = dict()
        self._http_request = HTTPRequest()
        self._url = domain
        self._rest_api_enumeration_is_possible = False
        self._author_enumeration_is_possible = False
        self._enumeration_start = self._DEFAULT_START_ENUMERATION
        self._enumeration_finish = self._enumeration_start + self._DEFAULT_ENUMERATION_CHUNK
        self._wp_detector = WPDetector(self._url, proxies)
        self._is_wp = False
        self.__initial()

    def enumerate(self, min_id=None, max_id=None, proxies=None):
        if self._is_wp is False or\
                (self._author_enumeration_is_possible is False and self._rest_api_enumeration_is_possible is False):
            return None

        if min_id is None:
            min_id = self._enumeration_start
        if max_id is None:
            max_id = self._enumeration_finish
        if self._rest_api_enumeration_is_possible is True:
            try:
                self._users.update(self.__rest_api_enumeration_all(self._url))
            except:
                print("Error: Function Rest Api Enumeration Individual is Failed.")
            try:
                self._users.update(self.__rest_api_enumeration_individual(self._url, min_id, max_id))
            except:
                print("Error: Function Rest Api Enumeration Individual is Failed.")
        elif self._author_enumeration_is_possible is True:
            try:
                self._users.update(self.__author_enumeration(self._url, min_id, max_id))
            except:
                print("Error: Function Author Enumeration is Failed.")
        else:
            print("Not Possible")
        return self._users

    def get_usernames(self):
        return list(self._users.values())

    def get_users_data(self):
        return self._users

    def __rest_api_enumeration_all(self, url):
        users = dict()
        target = url + self._REST_API_PATH
        response = self._http_request.request(target, "GET")
        if response is None:
            return users
        if response.status_code is not self._SUCCESS_CODE:
            return
        data = json.loads(response.content)
        for user in data:
            if user is self._REST_API_STATUS_COL:
                return None
            try:
                user = json.loads(json.dumps(user))
                users[user[self._REST_API_ID_COL]] = user[self._REST_API_SLUG_COL]
            except:
                continue

        return users

    def __rest_api_enumeration_individual(self, url, min_id, max_id):
        users = dict()
        for i in range(min_id, max_id):
            try:
                target = url + self._REST_API_PATH + str(i)
                response = self._http_request.request(target, "GET")
                if response is None:
                    return users
                if response.status_code is not self._SUCCESS_CODE:
                    continue
                user = json.loads(response.content)
                user = json.loads(json.dumps(user))
                if user.get(self._REST_API_STATUS_COL, None) is not None:
                    continue
                users[user[self._REST_API_ID_COL]] = user[self._REST_API_SLUG_COL]
            except:
                continue
        self._enumeration_start = max_id
        self._enumeration_finish = max_id + self._DEFAULT_ENUMERATION_CHUNK
        return users

    def __author_enumeration(self, url, min_id, max_id):
        users = dict()
        for i in range(min_id, max_id):
            try:
                target = url + self._AUTHOR_PATH + str(i)
                response = self._http_request.request(target, "GET")
                if response is None:
                    continue
                if response.status_code is not self._SUCCESS_CODE:
                    continue
                response = str(response.url).replace("https", "http").replace("www.", "")
                target = target.replace("https", "http").replace("www.", "")
                if response != target and "/author/" in response:  # we found user
                    user_name = response.replace("-", "").split("/")
                    user_name = user_name[len(user_name) - 2]
                    users[i] = user_name
            except:
                continue
        self._enumeration_start = max_id
        self._enumeration_finish = max_id + self._DEFAULT_ENUMERATION_CHUNK
        return users

    def __clean_url(self):
        if self._url[-1:] is "/":
            self._url = self._url[:-1]

    def __test_rest_api_enumeration(self):
        target = self._url + self._REST_API_PATH
        response = self._http_request.request(target, "GET")
        if response is None:
            return
        if response.status_code is not self._SUCCESS_CODE:
            return
        try:
            data = json.loads(response.content)
        except:
            return
        try:
            if data.get(self._REST_API_STATUS_COL, None) is not None:
                return
        except:
            self._rest_api_enumeration_is_possible = True

    def __test_author_enumeration(self):
        try:
            target = self._url + self._AUTHOR_PATH + "1"
            response = self._http_request.request(target, "GET")
            if response is None:
                return
            if response.status_code is not self._SUCCESS_CODE:
                return
            response = str(response.url).replace("https", "http").replace("www.", "")
            target = target.replace("https", "http").replace("www.", "")
            if response == target or "/author/" in response:  # we found user
                self._author_enumeration_is_possible = True
        except:
            return

    def __initial(self):
        self._is_wp = self._test_if_wp()
        self.__clean_url()
        if self._is_wp is True:
            self.__test_author_enumeration()
            self.__test_rest_api_enumeration()

    def _test_if_wp(self):
        if self._wp_detector.get_version(self._url) is "Unknown":
            return self._wp_detector.detect(self._url)
        return True

    def is_enumeration_possible(self):
        return self._rest_api_enumeration_is_possible or self._author_enumeration_is_possible
