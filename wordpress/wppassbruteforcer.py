from concurrent.futures.thread import ThreadPoolExecutor


class WPPassBruteforcer(object):

    def __init__(self, domain, additional_data=None, proxies=None):
        self._url = domain
        self._additional_data = additional_data
        self._proxies = proxies

    def __run(self):
        pass

    def bruteforce(self, usernames, passwords, threads=1, proxies=None):
        executor = ThreadPoolExecutor(max_workers=threads)
        for i in range(0,threads):
            executor.submit(self.__run())
        '''
        Consider adding progress logging by adding additional parameters
        :param usernames:
        :param passwords:
        :param threads: Number of threads to use
        :param proxies: working via HTTP proxies. If None, the constructor's proxies are used (if any)
        :return: dictionary of username to successfully bruteforced password
        '''

        raise NotImplementedError()

    def get_cracked_data(self):
        '''
        dictionary of username to successfully bruteforced password
        :return:
        '''
        raise NotImplementedError()

    def is_method_possible(self):

        raise NotImplementedError()

    # Feel free to add public method that you consider to be relevant for the users
    # user _ and __ for private and protected methods that should not be used outside the class
