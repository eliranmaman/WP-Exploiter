# Nethanel Gelernter (c)
from abc import ABC


class WPExploit(object):

    def __init__(self, domain, additional_data=None, proxies=None):
        self._url = str(domain)
        self._additional_data = additional_data
        self._proxies = proxies

        '''
        Keep state of data that is collected and tries that were performed for efficieny
        :param domain:
        :param additional_data: data that might be useful for performing the bruteforce (e.g., login page URL)
        :param proxies: working via HTTP proxies
        '''

    def plugin_name(self):
        '''

        :return: the vulnerable plugin's name
        '''

    def vulnerable_versions(self):
        '''

        :return: string the describes the ranges of vulnerable methods
        '''
        raise NotImplementedError()

    def is_vulnerable_version(self, version_str):
        '''

        :param version_str: X.Y.Z....
        :return: Whether the version is vulnerable or not
        '''
        raise NotImplementedError()

    def get_references(self):
        '''

        :return: list of URLs for data about the exploit & vulnerability (where did you find the data?)
        '''
        raise NotImplementedError()

    def is_vulnerable(self, data=None, proxies=None):
        '''
        Test whether vulnerable or not. If many requests or suspicious requests might be sent, consider adding
        aggresive parameter
        :param data: dictionary with data that can be used for the method
        :param proxies: working via HTTP proxies. If None, the constructor's proxies are used (if any)
        :return: Boolean - whether domain is vulnerable or not
        '''
        raise NotImplementedError()

    def exploit(self, data=None, proxies=None):
        '''
        If possible to exploit (E.g., in server-side vulns) - exploit
        In client-side, return the exploit code to use
        :param data: dictionary with data that can be used for the method
        :param proxies: working via HTTP proxies. If None, the constructor's proxies are used (if any)
        :return: Boolean - success or not
        '''
        raise NotImplementedError()

    # Feel free to add public method that you consider to be relevant for the users
    # user _ and __ for private and protected methods that should not be used outside the class


class WPPluginExploiter(WPExploit):

    def __init__(self, domain):
        super().__init__(domain)
        raise NotImplementedError()


class WPDatabaseReset(WPPluginExploiter):
    def __init__(self, domain):
        super().__init__(domain)
        raise NotImplementedError()
