from wordpress import WPEnumerator
import pytest
import unittest
import json


@pytest.mark.skip(reason="Tested")
@pytest.mark.filterwarnings("ignore:InsecureRequestWarning")
class TestWPEnumerator(unittest.TestCase):
    with open("tests/test_data.json", "r") as file:
        data = json.load(file)
        file.close()
    wp_webs = data['enumeration_possible']
    non_wp_webs = data['non_wp_webs']
    non_urls = data['non_urls']
    bad_urls = data['404_urls']

    @pytest.mark.enumerator
    def test_enumeration_possible(self):
        for web in self.wp_webs.keys():
            enumerator = WPEnumerator(web)
            is_possible = enumerator.is_enumeration_possible()
            assert type(is_possible) is bool
            assert is_possible is True
        for web in self.non_wp_webs:
            enumerator = WPEnumerator(web)
            is_possible = enumerator.is_enumeration_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.bad_urls
    def test_enumeration_possible_bad_urls(self):
        for web in self.bad_urls:
            enumerator = WPEnumerator(web)
            is_possible = enumerator.is_enumeration_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.non_urls
    def test_enumeration_possible_non_urls(self):
        for web in self.bad_urls:
            enumerator = WPEnumerator(web)
            is_possible = enumerator.is_enumeration_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.enumerator
    def test_enumeration(self):
        for web in self.wp_webs.keys():
            enumerator = WPEnumerator(web)
            users = enumerator.enumerate()
            assert type(users) is dict
            assert len(users) > 0
