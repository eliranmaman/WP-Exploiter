import pytest

from wordpress import WPLoginPageBruteforcer, WPXmlrpcBruteforcer
from tests.test_data import protocols, params

passwords = ["123456", "Aa100100", "Aa123123", "admin", "administrator"]
user_names = ["admin", "administrator", "elro_26"]
params[2] = ("elro-sec.com/dev2", False)
params[3] = ("elro-sec.com/dev3", False)


@pytest.mark.parametrize("url, result", params)
def test_bruteforce_via_login_page_possible(url, result):
    for protocol in protocols:
        target = "{}{}".format(protocol, url)
        bf = WPLoginPageBruteforcer(target)
        is_possible_helper(bf, result)


@pytest.mark.parametrize("url, result", params)
def test_bruteforce_via_login_page(url, result):
    for protocol in protocols:
        target = "{}{}".format(protocol, url)
        bf = WPLoginPageBruteforcer(target)
        if 'he.wordpress' not in url:
            crack_helper(bf, result)


@pytest.mark.skip(reason="xmltodict need fixing.")
@pytest.mark.parametrize("url, result", params)
def test_bruteforce_via_xml_possible(url, result):
    for protocol in protocols:
        target = "{}{}".format(protocol, url)
        bf = WPXmlrpcBruteforcer(target)
        is_possible_helper(bf, result)


@pytest.mark.skip(reason="xmltodict need fixing.")
@pytest.mark.parametrize("url, result", params)
def test_bruteforce_via_xml(url, result):
    for protocol in protocols:
        target = "{}{}".format(protocol, url)
        bf = WPXmlrpcBruteforcer(target)
        crack_helper(bf, result)


def crack_helper(bf, result):
    cracked = bf.bruteforce(usernames=user_names, passwords=passwords, threads=5)
    assert type(cracked) is dict
    size = len(cracked) > 0
    assert size is result
    cracked_2 = bf.get_cracked_data()
    assert type(cracked_2) is dict
    assert len(cracked_2) == len(cracked)
    shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
    assert len(shared_items) == len(cracked_2)


def is_possible_helper(bf, result):
    is_possible = bf.is_method_possible()
    assert type(is_possible) is bool
    assert is_possible is result
