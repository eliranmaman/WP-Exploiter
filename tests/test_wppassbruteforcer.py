from wordpress import WPLoginPageBruteforcer, WPXmlrpcBruteforcer
import pytest
import unittest
import json


@pytest.mark.filterwarnings("ignore:InsecureRequestWarning")
class TestWPLoginPageBruteforcer(unittest.TestCase):
    with open("tests/test_data.json", "r") as file:
        data = json.load(file)
        file.close()
    wp_webs = data['bruteforce_possible']
    non_wp_webs = data['non_wp_webs']
    non_urls = data['non_urls']
    bad_urls = data['404_urls']
    users = data['bruteforce_users']
    passwords = data['bruteforce_pass']

    @pytest.mark.bf_is_possible
    def test_is_possible(self):
        for web in self.wp_webs.keys():
            bf = WPLoginPageBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is True
        for web in self.non_wp_webs:
            bf = WPLoginPageBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.bf_is_possible
    def test_is_possible_non_urls(self):
        for web in self.non_urls:
            bf = WPLoginPageBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.bf_is_possible
    def test_is_possible_bad_urls(self):
        for web in self.bad_urls:
            bf = WPLoginPageBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.brute_force
    def test_brute_force(self):
        for web in self.wp_webs.keys():
            bf = WPLoginPageBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            if "agudacolman" in web:
                assert len(cracked) == 0
            elif "elro-sec" in web:
                assert len(cracked) > 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == len(cracked)
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == len(cracked_2)
        for web in self.non_wp_webs:
            bf = WPLoginPageBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            assert len(cracked) == 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == 0
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == 0

    @pytest.mark.brute_force
    def test_brute_force_non_urls(self):
        for web in self.non_urls:
            bf = WPLoginPageBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            assert len(cracked) == 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == 0
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == 0

    @pytest.mark.brute_force
    def test_brute_force_bad_urls(self):
        for web in self.non_urls:
            bf = WPLoginPageBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            assert len(cracked) == 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == 0
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == 0


@pytest.mark.filterwarnings("ignore:InsecureRequestWarning")
class TestWPXmlrpcBruteforcer(unittest.TestCase):
    with open("tests/test_data.json", "r") as file:
        data = json.load(file)
        file.close()
    wp_webs = data['bruteforce_possible']
    non_wp_webs = data['non_wp_webs']
    non_urls = data['non_urls']
    bad_urls = data['404_urls']
    users = data['bruteforce_users']
    passwords = data['bruteforce_pass']

    @pytest.mark.bf_is_possible
    def test_is_possible(self):
        for web in self.wp_webs.keys():
            bf = WPXmlrpcBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is True
        for web in self.non_wp_webs:
            bf = WPXmlrpcBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.bf_is_possible
    def test_is_possible_non_urls(self):
        for web in self.non_urls:
            bf = WPXmlrpcBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is False
    @pytest.mark.bf_is_possible
    def test_is_possible_bad_urls(self):
        for web in self.bad_urls:
            bf = WPXmlrpcBruteforcer(web)
            is_possible = bf.is_method_possible()
            assert type(is_possible) is bool
            assert is_possible is False

    @pytest.mark.brute_force
    def test_brute_force(self):
        for web in self.wp_webs.keys():
            bf = WPXmlrpcBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            if "agudacolman" in web:
                assert len(cracked) == 0
            elif "elro-sec" in web:
                assert len(cracked) > 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == len(cracked)
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == len(cracked_2)
        for web in self.non_wp_webs:
            bf = WPXmlrpcBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            assert len(cracked) == 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == 0
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == 0

    @pytest.mark.brute_force
    def test_brute_force_non_urls(self):
        for web in self.non_urls:
            bf = WPXmlrpcBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            assert len(cracked) == 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == 0
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == 0

    @pytest.mark.brute_force
    def test_brute_force_bad_urls(self):
        for web in self.non_urls:
            bf = WPXmlrpcBruteforcer(web)
            cracked = bf.bruteforce(usernames=self.users, passwords=self.passwords)
            assert type(cracked) is dict
            assert len(cracked) == 0
            cracked_2 = bf.get_cracked_data()
            assert type(cracked_2) is dict
            assert len(cracked_2) == 0
            shared_items = {k: cracked[k] for k in cracked if k in cracked_2 and cracked_2[k] == cracked_2[k]}
            assert len(shared_items) == 0