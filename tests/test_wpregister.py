import json
import time

import pytest
import unittest
from wordpress import WPRegisterUser
import random


class TestWPRegisterUser(unittest.TestCase):
    with open("tests/test_data.json", "r") as file:
        data = json.load(file)
        file.close()
    wp_webs = data['bruteforce_possible']
    non_wp_webs = data['non_wp_webs']
    non_urls = data['non_urls']
    bad_urls = data['404_urls']
    register_data = data['register_data']
    random.seed(time.time())
    _LOG = "/wp-login.php"
    _REG = "/wp-login.php?action=register"

    @pytest.mark.register
    def test_register(self):
        for web in self.wp_webs.keys():
            self.register_data['register_page'] = "{}{}".format(web.strip('/'), self._REG)
            self.register_data['login_page'] = "{}{}".format(web.strip('/'), self._LOG)
            self.register_data['mail_user'] = "elro@elro-sec.com".replace("@",
                                                                          "{}@".format(random.randrange(1, 1000000)))
            wp_reg = WPRegisterUser()
            self.register_data['username'] = "{}{}".format(self.register_data['username'], random.randrange(1, 1000000))
            reg = wp_reg.register(self.register_data)
            assert type(reg) is bool
            assert reg is True
        for web in self.non_wp_webs:
            self.register_data['register_page'] = "{}{}".format(web.strip('/'), self._REG)
            self.register_data['login_page'] = "{}{}".format(web.strip('/'), self._LOG)
            self.register_data['mail_user'] = "elro@elro-sec.com".replace("@",
                                                                          "{}@".format(random.randrange(1, 1000000)))
            wp_reg = WPRegisterUser()
            reg = wp_reg.register(self.register_data)
            assert type(reg) is bool
            assert reg is False

    @pytest.mark.register
    def test_register_missing_param(self):
        wp_reg = WPRegisterUser()
        for web in self.wp_webs.keys():
            self.register_data['register_page'] = "{}{}".format(web.strip('/'), self._REG)
            self.register_data['login_page'] = "{}{}".format(web.strip('/'), self._LOG)
            self.register_data['username'] = "{}{}".format(self.register_data['username'], random.random())
            param = dict()
            for key, value in self.register_data.items():
                param[key] = value
                if len(self.register_data.keys()) != len(param.keys()):
                    reg = wp_reg.register(param)
                    assert type(reg) is bool
                    assert reg is False

    @pytest.mark.bad_urls
    def test_register_bad_urls(self):
        for web in self.bad_urls:
            self.register_data['register_page'] = "{}{}".format(web.strip('/'), self._REG)
            self.register_data['login_page'] = "{}{}".format(web.strip('/'), self._LOG)
            self.register_data['mail_user'] = "elro@elro-sec.com".replace("@",
                                                                          "{}@".format(random.randrange(1, 1000000)))
            wp_reg = WPRegisterUser()
            reg = wp_reg.register(self.register_data)
            assert type(reg) is bool
            assert reg is False

    @pytest.mark.bad_urls
    def test_register_non_urls(self):
        for web in self.non_urls:
            self.register_data['register_page'] = "{}{}".format(web.strip('/'), self._REG)
            self.register_data['login_page'] = "{}{}".format(web.strip('/'), self._LOG)
            self.register_data['mail_user'] = "elro@elro-sec.com".replace("@",
                                                                          "{}@".format(random.randrange(1, 1000000)))
            wp_reg = WPRegisterUser()
            reg = wp_reg.register(self.register_data)
            assert type(reg) is bool
            assert reg is False
