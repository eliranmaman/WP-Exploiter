from wordpress import WPDetector
import pytest
import unittest
import json


@pytest.mark.filterwarnings("ignore:InsecureRequestWarning")
class TestWPDetector(unittest.TestCase):
    with open("tests/test_data.json", "r") as file:
        data = json.load(file)
        file.close()
    wp_webs = data['wp_webs']
    non_wp_webs = data['non_wp_webs']
    non_urls = data['non_urls']
    bad_urls = data['404_urls']

    @pytest.mark.detect
    def test_detect_with_thresh_hold_v6(self):
        """
        Test thresh hold at 0.6
        """
        for web in self.non_wp_webs:
            web = "http://{}".format(web)
            detector = WPDetector(web)
            detect = detector.detect(web, sensitivity=0.6)
            assert type(detect) is bool
            assert detect is False
        for web in self.wp_webs.keys():
            web = "http://{}".format(web)
            detector = WPDetector(web)
            detect = detector.detect(web, sensitivity=0.6)
            assert type(detect) is bool
            assert detect is True

    @pytest.mark.detect
    def test_detect_http_protocol(self):
        for web in self.wp_webs.keys():
            web = "http://{}".format(web)
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is True
        for web in self.non_wp_webs:
            web = "http://{}".format(web)
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is False

    @pytest.mark.detect
    def test_detect_https_protocol(self):
        for web in self.wp_webs.keys():
            web = "https://{}".format(web)
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is True
        for web in self.non_wp_webs:
            web = "https://{}".format(web)
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is False

    @pytest.mark.detect
    def test_detect_non_protocol(self):
        for web in self.wp_webs.keys():
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is True
        for web in self.non_wp_webs:
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is False

    @pytest.mark.version
    def test_version_http_protocol(self):
        for web, ver in self.wp_webs.items():
            web = "http://{}".format(web)
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == ver
        ver = "Unknown"
        for web in self.non_wp_webs:
            web = "http://{}".format(web)
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == ver

    @pytest.mark.version
    def test_version_https_protocol(self):
        for web, ver in self.wp_webs.items():
            web = "https://{}".format(web)
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == ver
        ver = "Unknown"
        for web in self.non_wp_webs:
            web = "https://{}".format(web)
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == ver

    @pytest.mark.version
    def test_version_non_protocol(self):
        for web, ver in self.wp_webs.items():
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == ver
        ver = "Unknown"
        for web in self.non_wp_webs:
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == ver

    @pytest.mark.non_urls
    def test_version_non_urls(self):
        for web in self.non_urls:
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == "Unknown"

    @pytest.mark.bad_urls
    def test_version_bad_urls(self):
        for web in self.bad_urls:
            detector = WPDetector(web)
            version = detector.get_version(web)
            assert type(version) is str
            assert version == "Unknown"

    @pytest.mark.non_urls
    def test_detection_non_urls(self):
        for web in self.non_urls:
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is False

    @pytest.mark.bad_urls
    def test_detection_bad_urls(self):
        for web in self.bad_urls:
            detector = WPDetector(web)
            detect = detector.detect(web)
            assert type(detect) is bool
            assert detect is False
