import json

from http_handler import HTTPHandler, HTTPWithSession
import pytest
import unittest


@pytest.mark.filterwarnings("ignore:InsecureRequestWarning")
@pytest.mark.filterwarnings("ignore:PytestUnknownMarkWarning")
class TestHttpHandler(unittest.TestCase):
    with open("tests/test_data.json", "r") as file:
        data = json.load(file)
        file.close()
    wp_webs = data['wp_webs']
    non_wp_webs = data['non_wp_webs']
    non_urls = data['non_urls']
    bad_urls = data['404_urls']
    status_code = data['status_code']
    http = HTTPHandler()
    http_session = HTTPWithSession()

    @pytest.mark.get
    def test_get_request(self):
        for web in self.non_wp_webs:
            response = self.http.request(web, "GET")
            assert response is not None
            assert response.status_code == 200
            assert response.content is not None
            assert response.headers is not None
            assert web in response.url
            assert response.request.method == "GET"
            assert web in response.request.url
            http_session = HTTPWithSession()
            response = http_session.request(web, "GET")
            assert response is not None
            assert response.status_code == 200
            assert response.content is not None
            assert response.headers is not None
            assert web in response.url
            assert response.request.method == "GET"
            assert web in response.request.url

    @pytest.mark.post
    def test_post_request(self):
        for web in self.non_wp_webs:
            response = self.http.request(web, "POST")
            assert response is not None
            assert response.status_code in self.status_code
            assert response.content is not None
            assert response.headers is not None
            assert web in response.url
            assert web in response.request.url
            http_session = HTTPWithSession()
            response = http_session.request(web, "POST")
            assert response is not None
            assert response.status_code in self.status_code
            assert response.content is not None
            assert response.headers is not None
            assert web in response.url
            assert web in response.request.url

    @pytest.mark.bad_urls
    def test_bad_urls_request(self):
        for web in self.bad_urls:
            with pytest.raises(Exception) as e:
                self.http.request(web, "GET")
            assert "ConnectionError" and "MaxRetryError" in str(e)
            with pytest.raises(Exception) as e:
                self.http.request(web, "POST")
            assert "ConnectionError" and "MaxRetryError" in str(e)
            http_session = HTTPWithSession()
            with pytest.raises(Exception) as e:
                http_session.request(web, "GET")
            assert "ConnectionError" and "MaxRetryError" in str(e)
            with pytest.raises(Exception) as e:
                http_session.request(web, "POST")
            assert "ConnectionError" and "MaxRetryError" in str(e)

    @pytest.mark.non_urls
    def test_no_urls_request(self):
        for web in self.non_urls:
            with pytest.raises(Exception) as e:
                self.http.request(web, "GET")
            assert "MaxRetryError" or "InvalidURL" in str(e)
            with pytest.raises(Exception) as e:
                self.http.request(web, "POST")
            assert "MaxRetryError" or "InvalidURL" in str(e)
            http_session = HTTPWithSession()
            with pytest.raises(Exception) as e:
                http_session.request(web, "GET")
            assert "MaxRetryError" or "InvalidURL" in str(e)
            with pytest.raises(Exception) as e:
                http_session.request(web, "POST")
            assert "MaxRetryError" or "InvalidURL" in str(e)